{"version":3,"file":"graphjs.min.js","sources":["../../src/canvas/setupHiDefCanvas.js","../../src/canvas/Renderer.js","../../src/geometry/Vector.js","../../src/geometry/Geometry.js","../../src/graph/Link.js","../../src/graph/Node.js","../../src/graph/Graph.js","../../src/graph/TreeNode.js","../../src/graph/Tree.js","../../src/layout/AbstractGraphLayout.js","../../src/layout/ForceDirected.js","../../src/layout/TreeLayout.js","../../src/shape/Constants.js","../../src/shape/Shape.js","../../src/shape/Arc.js","../../src/shape/Circle.js","../../src/shape/Rectangle.js","../../src/InputDeviceTracker.js","../../src/MChart.js","../../src/SVGUtil.js","../../src/OrgChart.js","../../src/geometry/Trigo.js","../../src/index.js"],"sourcesContent":["/**\n * Create a High Definition Canvas.\n *\n * @param {*} canvas\n * @returns Scaled 2d Context\n */\nexport default function setupHiDefCanvas(canvas) {\n\t// Get the device pixel ratio, falling back to 1.\n\tvar devicePixelRatio = window.devicePixelRatio || 1;\n\n\tvar ctx = canvas.getContext(\"2d\");\n\n\tconsole.log(\"─────────────────────────\")\n\tconsole.log(\"│ setupHiDefCanvas      │\")\n\tconsole.log(\"─────────────────────────\")\n\tconsole.log(\"  devicePixelRatio : \" + devicePixelRatio)\n\tconsole.log(\"  canvas.width  : \" + canvas.width)\n\tconsole.log(\"  canvas.height : \" + canvas.height)\n\n\t// Get the size of the canvas in CSS pixels.\n\tvar rect = canvas.getBoundingClientRect();\n\tconsole.log(\"  rect.width  : \" + rect.width)\n\tconsole.log(\"  rect.height : \" + rect.height)\n\n    const initialWidth = canvas.width;\n    const initialHeight = canvas.height;\n\n\n\t// On Hi Def like Retina display we double the size of the canvas\n\tcanvas.width = initialWidth * devicePixelRatio;\n\tcanvas.height = initialHeight * devicePixelRatio;\n    ctx.scale(devicePixelRatio, devicePixelRatio);\n\n\t// and we shrink the display size using CSS\n\tcanvas.style.width = initialWidth + 'px';\n    canvas.style.height = initialHeight + 'px';\n\n\tconsole.log(\"  canvas.style.width  : \" + canvas.style.width)\n\tconsole.log(\"  canvas.style.height  : \" + canvas.style.height)\n\n\tconsole.log(\"  canvas.width  : \" + canvas.width)\n\tconsole.log(\"  canvas.height : \" + canvas.height)\n\n\tconsole.log(\" └───────────────────────┘\")\n\n\treturn ctx;\n}","\n\nexport default class Renderer {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n    }\n\n    drawGrid(w, h) {\n\n        this.ctx.save()\n\n        this.ctx.fillStyle = 'white'\n        this.ctx.fillRect(0, 0, w, h)\n        this.ctx.lineWidth = 0.3;\n        this.ctx.strokeStyle = 'lightgray'\n        this.ctx.fillStyle = 'black'\n\n        for (let i = 1; i < w; i++) {\n            this.ctx.beginPath()\n            if (i % 10 === 0) {\n                this.ctx.moveTo(i, 0);\n                this.ctx.lineTo(i, h)\n                this.ctx.moveTo(i, 0);\n            }\n            this.ctx.closePath()\n            this.ctx.stroke()\n        }\n\n        for (let i = 1; i < h; i++) {\n            this.ctx.beginPath()\n            if (i % 10 === 0) {\n                this.ctx.moveTo(0, i)\n                this.ctx.lineTo(w, i)\n                this.ctx.moveTo(0, i)\n            }\n            this.ctx.closePath()\n            this.ctx.stroke()\n        }\n\n\n        this.ctx.lineWidth = 1\n        this.ctx.strokeStyle = 'gray'\n\n        this.ctx.beginPath()\n        for (let i = 50; i < w; i += 10) {\n            if (i % 50 === 0) {\n                this.ctx.moveTo(i, 0)\n                this.ctx.lineTo(i, 30)\n                this.ctx.fillText(` ${i}`, i, 30)\n            } else {\n                this.ctx.moveTo(i, 0)\n                this.ctx.lineTo(i, 10)\n            }\n\n        }\n        this.ctx.closePath()\n        this.ctx.stroke()\n\n        this.ctx.beginPath()\n        for (let i = 50; i < h; i += 10) {\n            if (i % 50 === 0) {\n                this.ctx.moveTo(0, i)\n                this.ctx.lineTo(30, i)\n                this.ctx.fillText(` ${i}`, 30, i)\n            } else {\n                this.ctx.moveTo(0, i)\n                this.ctx.lineTo(10, i)\n            }\n\n        }\n        this.ctx.closePath()\n        this.ctx.stroke()\n\n        this.ctx.restore()\n    }\n}","/**\n *  A vector is an entity that has both magnitude and direction.\n *  2D vector implementation based on the vector functions in P5.js\n */\n export class Vector {\n\tconstructor(x, y) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t\tif (isNaN(x) || isNaN(y)) {\n\t\t\tconsole.warn(`Vector(): parameters are not number: (${x}), ${y} `);\n\t\t}\n\t}\n\n\tstatic add(v1, v2) {\n\t\treturn new Vector(v1.x + v2.x, v1.y + v2.y);\n\t}\n\n\t/**\n\t * Divides a vector by a scalar and returns a new vector.\n\t *\n\t * @method div\n\t * @static\n\t * @param  {Vector} v\n\t * @param  {Number}  n\n\t * @return  {Vector}\n\t */\n\tstatic div(v, n) {\n\t\tlet result = v.copy();\n\t\treturn result.div(n);\n\t}\n\n\t/**\n\t * Linear interpolate the vector to another vector\n\t */\n\tstatic lerp(v1, v2, amount) {\n\t\tlet result = v1.copy();\n\t\treturn result.lerp(v2, amount);\n\t}\n\n\tstatic random(min, max) {\n\t\tlet x = randomIntBounds(min, max);\n\t\tlet y = randomIntBounds(min, max);\n\t\treturn new Vector(x, y);\n\t}\n\n\tstatic sub(v1, v2) {\n\t\treturn new Vector(v1.x - v2.x, v1.y - v2.y);\n\t}\n\n\t/**\n\t * Supports adding a Vector or a Scalar\n\t * @param {*} n\n\t * @returns\n\t */\n\tadd(n) {\n\t\tif (n instanceof Vector) {\n\t\t\tthis.x += n.x;\n\t\t\tthis.y += n.y;\n\t\t\treturn this;\n\t\t} else if (typeof n === \"number\") {\n\t\t\tthis.x += n;\n\t\t\tthis.y += n;\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconsole.error(`Parameter in Vector.add(n) Not supported: ${n})`);\n\t\t}\n\t}\n\n\t/**\n\t * Return a copy of this Vector\n\t * @returns\n\t */\n\tcopy() {\n\t\treturn new Vector(this.x, this.y);\n\t}\n\n\t/**\n\t * Divide vector length (ie magnitude) by a constant  \n\t */ \n\tdiv(n) {\n\t\tif (n === 0) {\n\t\t\t//console.warn(\"Vector.div:\", \"divide by 0\");\n\t\t\treturn this;\n\t\t}\n\t\tthis.x /= n;\n\t\tthis.y /= n;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Linear Interpolation\n\t */ \n\tlerp(v1, amount) {\n\t\tthis.x += (v1.x - this.x) * amount || 0;\n\t\tthis.y += (v1.y - this.y) * amount || 0;\n\t\treturn this;\n\t}\n\t/**\n\t * Returns the direction of the Vector\n\t * @returns \n\t */\n\theading() {\n\t\tconst h = Math.atan2(this.y, this.x);\n\t\treturn h;\n\t}\n\n\tmagSq() {\n\t\tconst x = this.x;\n\t\tconst y = this.y;\n\t\treturn x * x + y * y;\n\t}\n\n\tmag() {\n\t\treturn Math.sqrt(this.magSq());\n\t}\n\n\tnormalize() {\n\t\treturn this.div(this.mag());\n\t}\n\n\t/**\n\tMultiply vector length (ie magnitude) by a constant\n\t*/\n\tmult(n) {\n\t\tif (isNaN(n)) {\n\t\t\tconsole.error(`Vector.mult: parameter is not a number: (${n})`);\n\t\t}\n\t\tthis.x *= n;\n\t\tthis.y *= n;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  set magnitude to a given value\n\t */\n\tsetMag(n) {\n\t\treturn this.normalize().mult(n);\n\t}\n\n\n\t/**\n\t * Substracts either a Vector or a scalar\n\t * @param {*} n \n\t * @returns \n\t */\n\tsub(n) {\n\t\tif (n instanceof Vector) {\n\t\t\tthis.x -= n.x;\n\t\t\tthis.y -= n.y;\n\t\t\treturn this;\n\t\t} else if (typeof n === \"number\") {\n\t\t\tthis.x -= n;\n\t\t\tthis.y -= n;\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconsole.error(`Parameter in Vector.sub(n) Not supported: ${n})`);\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"[\" + this.x + \", \" + this.y + \"]\";\n\t}\n}\n\n/* Return a random integer between min and max (inclusive) */\nfunction randomIntBounds(min, max) {\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Vector;","\n export function rectContainsShape(rectangle, shape) {\n\tif (shape.type == \"Circle\") {\n\t\treturn rectContainsCircle(rectangle, shape);\n\t} else if (shape.type == \"Rectangle\") {\n\t\treturn rectContainsRect(rectangle, shape);\n\t} else {\n\t\tconsole.error(\"rectContainsShape: shape is unknown: \" + shape);\n\t\tconsole.error( shape);\n\t}\n}\n\n/**\n *\n *\n *    x,y\n *    ┌────────────────────────┐ width\n *    │  x,y             width │\n *    │  ┌──────────────────┐  │\n *    │  │                  │  │\n *    │  │                  │  │\n *    │  │                  │  │\n *    │  └──────────────────┘  │\n *    │                  heigth│\n *    └────────────────────────┘ heigth\n\n * @param {*} rect1 \n * @param {*} rect2 \n * @returns \n */\n/*\n function rectContainsRect(rect1, rect2) {\n\tconsole.log(\"rectContainsRect\");\n\t// console.log(rect1.toStringCoordinates());\n\t// console.log(rect2.toStringCoordinates());\n\n\tvar result_X =\n\t\trect1.getX() < rect2.getX() &&\n\t\trect1.getX() + rect1.getWidth() < rect2.getX() + rect2.getWidth();\n\n\tvar result_Y =\n\t\trect1.getY() > rect2.getY() &&\n\t\trect1.getY() + rect1.getHeight() <= rect2.getY() + rect2.getHeight();\n\n\treturn result_X & result_Y;\n}\n*/\n\nfunction rectContainsRect(rect1, rect2) {\n\tvar result_X =\n\t\trect1.x < rect2.x && rect1.x + rect1.width > rect2.x + rect2.width;\n\n\tvar result_Y =\n\t\trect1.y < rect2.y && rect1.y + rect1.height > rect2.y + rect2.height;\n\n\treturn result_X & result_Y;\n}\n\n\n\n\n\nfunction rectContainsCircle(rectangle, circle) {\n\t// LEFT\n\tvar left_include = rectangle.x < circle.x - circle.radius;\n\tif (!left_include) {\n\t\t//circle is outside of the rectangle on the left side\n\t\treturn false;\n\t}\n\t// RIGHT\n\tvar right_include =\n\t\trectangle.x + rectangle.width > circle.x + circle.radius;\n\tif (!right_include) {\n\t\t//circle is outside of the rectangle on the right side\n\t\treturn false;\n\t}\n\t// BOTTOM\n\tvar bottom_include =\n\t\trectangle.y + rectangle.height > circle.y + circle.radius;\n\tif (!bottom_include) {\n\t\t//circle is outside of the rectangle on the bottom side\n\t\treturn false;\n\t}\n\t// TOP:\n\tvar top_include = rectangle.y < circle.y - circle.radius;\n\tif (!top_include) {\n\t\t//circle is outside of the rectangle on the top side\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n","export default class Link {\n\tconstructor(source, target) {\n\t\tif (source.id && target.id) {\n\t\t\tthis.id = source.id + \" → \" + target.id;\n\t\t} else {\n\t\t\tthis.id = source + \" → \" + target;\n\t\t}\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n}\n","import Vector from \"../geometry/Vector\";\n\n\nexport default class Node {\n\tconstructor(id, data) {\n\t\tthis.id = id;\n\n\t\tthis.data = data;\n\t\tthis.children = [];\n\n\t\tthis.isCollapsed = false;\n\n\t\tthis.size = 20;\n\t\tthis.mass = 13; //(6 * this.size) / 1.5;\n\t\tthis.radius = this.size;\n\n\t\tthis.pos = new Vector(0, 0);\n\t\tthis.velocity = new Vector(0, 0);\n\t\tthis.acceleration = new Vector(0, 0);\n\t}\n\n\ttoString() {\n//\t\treturn \"Node \" + this.id + \" (\" + this.pos.x + \", \" + this.pos.y + \")\";\n\t\treturn \"Node \" + this.id + \" (\" + this.x + \", \" + this.y + \")\";\n\n\t}\n\n\taddChild(node) {\n\t\tthis.children.push(node);\n\t}\n\n\tgetAdjacents() {\n\t\treturn this.children;\n\t}\n\n\tisAdjacent(node) {\n\t\treturn this.children.indexOf(node) > -1;\n\t}\n\n\t\n}\n","// =============================================================\n//                          Graph\n// =============================================================\nimport Link from \"./Link\";\nimport Node from \"./Node\";\n\nexport default class Graph {\n  constructor() {\n    this.graph = {};\n    this.nodeList = new Map();\n    this.linkList = [];\n    this.adjacency = {};\n    this.changed = false;\n    this.root;\n  }\n\n  /**\n   * Add a node\n   * @param {*} node\n   * @returns\n   */\n  addNode(node) {\n    if (!(node.id in this.graph)) {\n      this.nodeList.set(node.id, node); //\tthis.nodeList.push(node);\n      this.graph[node.id] = node;\n    } else {\n      console.error(\"Node already exists: \" + node.id);\n    }\n    return node;\n  }\n  getNode(nodeId) {\n    //var node = this.graph[nodeId];\n    return this.nodeList.get(nodeId);\n  }\n  removeNode(nodeId) {\n    this.nodeList.delete(nodeId);\n  }\n\n  /**\n   *  Add an object. Create a node from the specified object\n   * @param {*} object\n   * @returns\n   */\n  addObject(object) {\n    var node = new Node(object.id, object);\n\n    if (object.parentId) {\n      node.parent = this.getNode(object.parentId);\n      if (!node.parent) {\n        console.error(\"Parent node not found for parentId: \" + object.parentId);\n      } else {\n        node.level = node.parent.level + 1;\n        node.parent.children.push(node);\n      }\n    } else {\n      this.root = node;\n    }\n    this.addNode(node);\n    this.changed = true;\n    return node;\n  }\n\n  getLinkCount() {\n    return this.linkList.length;\n  }\n  getNodeCount() {\n    //return this.nodeList.length;\n    return this.nodeList.size;\n  }\n\n  addLink(sourceNode_id, targetNode_id) {\n    var sourceNode = this.getNode(sourceNode_id);\n    if (sourceNode == undefined) {\n      throw new TypeError(\"Trying to add a link to the non-existent node with id: \" + sourceNode_id);\n    }\n    var targetNode = this.getNode(targetNode_id);\n    if (targetNode == undefined) {\n      throw new TypeError(\"Trying to add a link to the non-existent node with id: \" + targetNode_id);\n    }\n\n    var link = new Link(sourceNode, targetNode);\n    var exists = false;\n\n    this.linkList.forEach(function (item) {\n      if (link.id === item.id) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      this.linkList.push(link);\n      sourceNode.addChild(targetNode);\n    } else {\n      console.log(\"LINK EXIST: \" + \" source: \" + link.source.id + \" => \" + link.target.id);\n    }\n\n    if (!(link.source.id in this.adjacency)) {\n      this.adjacency[link.source.id] = {};\n    }\n    if (!(link.target.id in this.adjacency[link.source.id])) {\n      this.adjacency[link.source.id][link.target.id] = [];\n    }\n    this.adjacency[link.source.id][link.target.id].push(link);\n  }\n\n  /**\n   *  JSON input can be either a JSON String or a JSON object\n   * @param {*} json_input\n   */\n  loadJSON(json_input) {\n    console.log(\"Graph.loadJSON: json_string: \");\n    console.log(json_input);\n    var json_object;\n    if (typeof json_input === \"string\") {\n      console.log(\"Graph.loadJSON: input is of type string: \");\n      json_object = JSON.parse(json_input);\n    } else if (typeof json_input === \"object\") {\n      console.log(\"Graph.loadJSON: input is of type object: \");\n      json_object = json_input;\n    }\n\n    var nodes = json_object[\"nodes\"];\n    for (let index = 0; index < nodes.length; index++) {\n      var node = nodes[index];\n      this.addObject(node);\n    }\n\n    var links = json_object[\"links\"];\n    if (links) {\n      for (let index = 0; index < links.length; index++) {\n        var link = links[index];\n        this.addLink(link.source, link.target);\n      }\n    }\n    console.log(\"Graph.loadJSON:  loaded Graph=\");\n    console.log(this.graph);\n  }\n\n  toString() {\n    //return this.nodeList.map(printNode);\n    return Array.from(this.nodeList.values()).map(printNode);\n  }\n}\n\nfunction printNode(node) {\n  var adjacentsRepresentation = \"\";\n  if (node.getAdjacents() == 0) {\n    adjacentsRepresentation = \"no children\";\n  } else {\n    adjacentsRepresentation = node\n      .getAdjacents()\n      .map(function (item) {\n        return item.id;\n      })\n      .join(\", \");\n  }\n  return node.id + \" => \" + adjacentsRepresentation;\n}\n","import Node from \"./Node\";\n\nclass TreeNode extends Node {\n  constructor(nodeID, nodeData) {\n    super(nodeID, nodeData);\n    this.children = [];\n    this.parent;\n    this.level = 1;\n    this.path = \"1\";\n  }\n\n    /**\n     * Add a child node to a node, sets the child node as the parent of the current node \n     * and returns the index of the new child node in the list of children.\n     * @param items New elements to add to the array.\n     * @returns number The index of the new child node in the list of children\n     */\n  addChild(node) {\n    node.parent = this;\n    return this.children.push(node);\n  }\n\n  getChildAt(i) {\n    return this.children[i];\n  }\n  getFirstChild() {\n    return this.getChildAt(0);\n  }\n  getChildren() {\n    return this.children;\n  }\n  getChildrenCount() {\n    return this.children.length;\n  }\n  /**\n   *  isLeftMost: is this node == to the first child of its parent?\n   */\n  isLeftMost() {\n    if (!this.parent || this.parent === null) {\n      return true;\n    } else {\n      return this.parent.getFirstChild() === this;\n    }\n  }\n\n  /**\n   *  isRightMost: is this node == to the last child of its parent?\n   */\n  isRightMost() {\n    if (!this.parent || this.parent === null) {\n      return true;\n    } else {\n      return this.parent.getLastChild() === this;\n    }\n  }\n\n  getLastChild() {\n    return this.getChildAt(this.getChildrenCount() - 1);\n  }\n\n  getLeftSibling() {\n    if (this.parent === null || this.isLeftMost()) {\n      return null;\n    } else {\n      var index = this.parent.children.indexOf(this);\n      return this.parent.children[index - 1];\n    }\n  }\n\n  isLeaf() {\n    return this.children && this.children.length == 0;\n  }\n  hasChild() {\n    return this.children && this.children.length > 0;\n  }\n\n  isAncestorCollapsed() {\n    if (this.parent == null) {\n      return false;\n    }\n    return this.parent.isCollapsed ? true : this.parent.id === -1 ? false : this.parent.isAncestorCollapsed();\n  }\n\n  getRightSibling() {\n    if (this.parent === null || this.isRightMost()) {\n      return null;\n    } else {\n      var index = this.parent.children.indexOf(this);\n      return this.parent.children[index + 1];\n    }\n  }\n\n  getLeftMostChild() {\n    if (this.getChildrenCount() == 0) return null;\n\n    return this.children[0];\n  }\n\n  getRightMostChild() {\n    if (this.getChildrenCount() == 0) return null;\n\n    return this.children[this.getChildrenCount() - 1];\n  }\n\n  hasLeftSibling() {\n    return !this.isLeftMost();\n  }\n\n  getIndex () {\n    return this.parent.children.indexOf(this);\n  }\n\n}\n\nexport { TreeNode };\n","import Graph from \"./Graph\";\nimport { TreeNode } from \"./TreeNode\";\n//import Link from \"./Link\";\n\nexport class Tree extends Graph {\n  constructor() {\n    super();\n    this.root = null;\n    this.nodeMap = new Map();\n  }\n\n  setRoot(nodeID) {\n    this.root = nodeID;\n  }\n  getRoot() {\n    return this.root;\n  }\n\n  isRoot(node) {\n    return node === this.root;\n  }\n\n  traverseDF(callback) {\n    function traverse(node) {\n      callback(node);\n      if (node.children) {\n        node.children.forEach(traverse);\n      }\n    }\n    traverse(this.root);\n  }\n\n  traverseBF(callback) {\n    const queue = [this.root];\n    while (queue.length) {\n      const node = queue.shift();\n      callback(node);\n      node.children.forEach((child) => queue.push(child));\n    }\n  }\n\n  getNode(nodeId) {\n    return this.nodeMap.get(nodeId);\n  }\n\n  /**\n   * Returns { status: 'success'} or { status: 'error', message: \"error message\"}\n   * @param {*} json\n   */\n  loadFromJSON(json) {\n    const data = JSON.parse(json);\n\n    // create nodes\n    data.forEach((nodeData) => {\n      const { id, data } = nodeData;\n      const node = new TreeNode(id, data, null);\n      this.nodeMap.set(id, node);\n      // add node to nodesByLevel array\n      //console.log(\"\")\n      //addNodeToLevel(id, parentId, nodesByLevel, node);\n    });\n\n    // Add child nodes to parent nodes\n    data.forEach((nodeData) => {\n      const { id, parentId } = nodeData;\n      const node = this.nodeMap.get(id);\n      if (parentId) {\n        const parent = this.nodeMap.get(parentId);\n        if (!parent) {\n          return { status: \"error\", message: \"Parent node not found for parentId: \" + parentId };\n        }\n        const nodeIndex = parent.addChild(node);\n        node.level = node.parent.level + 1;\n        const parentPath = node.parent ? (node.parent.path + \"-\") : \"\";\n        node.path = parentPath + (nodeIndex + 1);\n        console.log(`Node ${id} / index : ${nodeIndex}  / path : ${node.path}`);\n      } else {\n        this.root = node;\n      }\n    });\n    return { status: \"success\" };\n  }\n}\n","/* eslint-disable no-unused-vars */\n\n//import Graph from \"../graph/Graph\";\n//import Node from \"../graph/Node\";\n\n\nexport default class AbstractGraphLayout {\n\n    // need to get nodeWidth & nodeHeight\n    constructor(graph, options) {\n\t\tthis.graph = graph;\n\n    }\n\n    calculate_Positions(graph, starting_vertex, center) {\n        console.error(\"not implemented in AbstractGraphLayout. Make sure to use a concrete layout class.\")\n    }\n}","// =============================================================\n// Force Directed Layout\n// =============================================================\nimport AbstractGraphLayout from \"./AbstractGraphLayout\";\nimport Vector from \"../geometry/Vector\";\n\nexport default class ForceDirected extends AbstractGraphLayout {\n\tconstructor(graph, options) {\n\n\t\tsuper();\n\t\tthis.graph = graph;\n\t\tthis.initNodes();\n\n\t\tconst DEFAULTS = {\n\t\t\tGRAVITY: 0.9,\n\t\t\tREPULSION: 500000,\n\t\t};\n\t\tthis.options = Object.assign({}, DEFAULTS, options);\n\t}\n\n\tinitNodes() {\n\t\tlet min = -1000;\n\t\tlet max = 1000;\n\n\t\tthis.graph.nodeList.forEach((node) => {\n\t\t\tnode.pos = new Vector.random(min, max);\n\t\t});\n\t}\n\n\trun() {\n\t\t//requestAnimationFrame(this.animate);\n\t\tconsole.log(\"run\");\n\t}\n\n\tanimate = () => {\n\t\tconsole.log(\"animate\");\n\t};\n\n\t/**\n\t *  applyForce\n\t *\n\t *  Newton’s second law.\n\t *  Receive a force, divide by mass, and add to acceleration.\n\t */\n\tapplyForce(node, force) {\n\t\tlet forceOverMass = Vector.div(force, node.mass);\n\t\tnode.acceleration.add(forceOverMass);\n\t}\n\n\tupdateNodesVelocity() {\n\t\tthis.graph.nodeList.forEach((node) => {\n\t\t\tlet force_copy = node.acceleration.copy();\n\t\t\tlet forceOverMass = force_copy.div(node.mass);\n\t\t\t//\tnode.velocity.add( forceOverMass );\n\t\t\tnode.pos.add(forceOverMass);\n\n\t\t\t//\tnode.velocity.add(node.acceleration);\n\t\t\t//\tnode.pos.add(node.velocity);\n\t\t\t//\tnode.acceleration.mult(0);\n\t\t});\n\t}\n\n\tapplyForcesTowardsCenter() {\n\t\t// apply force towards center\n\t\tthis.graph.nodeList.forEach((node) => {\n\t\t\tlet gravity = node.pos.copy().mult(-1).mult(this.options.GRAVITY);\n\t\t\tnode.acceleration = gravity;\n\t\t\t//node.applyForce(gravity);\n\t\t\t//console.log(node);\n\t\t});\n\t}\n\n\tapplyRepulsiveForces() {\n\t\t// apply repulsive force between nodes\n\t\tlet nodeValues = Array.from(this.graph.nodeList.values());\n\n\t\tfor (let i = 0; i < nodeValues.length - 1; i++) {\n\t\t\tfor (let j = i + 1; j < nodeValues.length; j++) {\n\t\t\t\tif (i != j) {\n\t\t\t\t\tlet node1 = nodeValues[i];\n\t\t\t\t\tlet node2 = nodeValues[j];\n\t\t\t\t\t//console.log(\"applyRepulsiveForces\");\n\t\t\t\t\t//console.log(node1);\n\t\t\t\t\t//console.log(node2);\n\n\t\t\t\t\t// The gravitational force F between two bodies of mass m1 and m2 is\n\t\t\t\t\t// F = G*m1*m2 / r2\n\t\t\t\t\t// the vector that points from one object to the other\n\t\t\t\t\tlet dir = Vector.sub(node2.pos, node1.pos);\n\t\t\t\t\t// let unit = dir.copy().normalize()\n\n\t\t\t\t\t// the length (magnitude) of that vector is the distance between the two objects.\n\t\t\t\t\tlet distance = dir.mag();\n\n\t\t\t\t\t// The strength of the force is inversely proportional to the distance squared.\n\t\t\t\t\t// The farther away an object is, the weaker the force; the closer, the stronger.\n\t\t\t\t\t// original  : without the normalize\n\t\t\t\t\tdir.normalize();\n\n\t\t\t\t\tlet force1 = dir.mult(this.options.REPULSION);\n\t\t\t\t\tforce1.div(distance * distance);\n\n\t\t\t\t\tlet inverseForce = force1.copy().mult(-1);\n\t\t\t\t\tnode2.acceleration.add(force1);\n\t\t\t\t\tnode1.acceleration.add(inverseForce);\n\n\t\t\t\t\t//node2.applyForce(force1);\n\t\t\t\t\t//node1.applyForce(inverseForce);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tapplyForcesExertedByConnections() {\n\t\tthis.graph.linkList.forEach((link) => {\n\t\t\tlet node1 = link.source;\n\t\t\tlet node2 = link.target;\n\n\t\t\t//let maxDis = con[2];\n\t\t\t//let connector_length = 100;\n\n\t\t\tlet dir = Vector.sub(node1.pos, node2.pos);\n\n\t\t\tlet neg_force = new Vector(0, 0).sub(dir);\n\t\t\tlet pos_force = new Vector(0, 0).add(dir);\n\n\t\t\tnode1.acceleration.add(neg_force);\n\t\t\tnode2.acceleration.add(pos_force);\n\n\t\t\t//node1.applyForce(neg_force);\n\t\t\t//node2.applyForce(pos_force);\n\t\t});\n\t}\n\n\tapplyForces() {\n\t\t// Force equals mass times acceleration.\n\t\t// Newton’s second law, F→=M×A→ (or force = mass * acceleration).\n\t\tthis.applyForcesTowardsCenter();\n\n\t\tthis.applyRepulsiveForces();\n\n\t\tthis.applyForcesExertedByConnections();\n\n\t\tthis.updateNodesVelocity();\n\n\t\t// kinetic energy (KE) is equal to half of an object's mass (1/2*m) multiplied by the velocity squared.\n\t\t/*\n\t\tlet total_KE = 0.0;\n\t\tthis.graph.nodeList.forEach((node) => {\n\t\t\tlet velocity = node.velocity.mag();\n\n\t\t\tlet node_KE = 0.5 * node.mass * (velocity * velocity);\n\t\t\ttotal_KE = + node_KE;\n\n\t\t});\n\t\tconsole.warn(\"total_KE= \" + total_KE);\n\t\t*/\n\t}\n}\n","import AbstractGraphLayout from \"./AbstractGraphLayout\";\n\nconst DEFAULTS = {\n  rootOrientation: \"NORTH\",\n  maximumDepth: 3,\n  levelSeparation: 50 /* distance between levels = vertical spread */,\n  marginTop : 10,\n  marginLeft : 10,\n  siblingSpacing: 50 /* distance between leaf siblings */,\n  subtreeSeparation: 160 /* distance between each subtree */,\n  stackedLeaves: true,\n  stackedIndentation : 40,\n  nodeWidth: 0,\n  nodeHeight: 0\n}\n\nexport default class TreeLayout extends AbstractGraphLayout {\n  constructor(tree, options) {\n    super(tree);\n    /**\n     * lastNodeAtLevel: stores the last node visited at each level to set as left most nodes' neighbor\n     */\n    this.lastNodeAtLevel = [];\n\n    this.options = Object.assign({}, DEFAULTS, options);\n    options || (options = {});\n    for (let i in DEFAULTS) {\n      if (i in options) {\n        this[i] = options[i];\n      } else {\n        this[i] = DEFAULTS[i];\n      }\n    }\n\n    if (this.levelSeparation < this.nodeHeight * 2) {\n      this.levelSeparation = this.nodeHeight * 2;\n    }\n    // should be proportional to the width of the tree\n    if (this.subtreeSeparation < this.nodeWidth * 3) {\n      //this.subtreeSeparation = this.nodeWidth*2;\n    }\n\n    console.log(\"TreeLayout constructed.\");\n    console.log(this);\n\n    /**\n     * Do a post-order traversal (ie: from the bottom-left to the top-right)\n     * Visit the current node after visiting all the nodes from left to right.\n     */\n    const firstWalk = (node, level) => {\n      //console.log(\"firstWalk\", node, level);\n\n      // private function implementation\n      node.prelim = 0;\n      node.modifier = 0;\n      node.width = node.width || this.nodeWidth;\n      node.height = node.height || this.nodeHeight;\n\n      setNodeNeighbor(node, level);\n\n      //\n      let leftSibling = node.getLeftSibling();\n      //console.log(\"leftSibling  = \" + leftSibling);\n      if (node.isLeaf() || node.level == this.maximumDepth) {\n        if (leftSibling) {\n          /*-------------------------------------------------\n           * Determine the preliminary x-coordinate based on:\n           * - preliminary x-coordinate of left sibling,\n           * - the separation between sibling nodes, and\n           * - mean width of left sibling & current node.\n           *-------------------------------------------------*/\n          //console.log(\"\\\\___ firstWalk Sibling: left=\" + leftSibling.id + \" right=\" + node.id);\n          node.prelim = leftSibling.prelim + this.siblingSpacing;\n          let meanNodeSize = getMeanNodeSize(node, leftSibling);\n          //\tconsole.log(\"meanNodeSize = \" + meanNodeSize);\n          node.prelim += meanNodeSize;\n          //console.log(\"prelim = \" + leftSibling.prelim + \" + \" + this.siblingSpacing + \" + \" + meanNodeSize + \" = \" + node.prelim);\n        } else {\n          /*  no sibling on the left to worry about  */\n          node.prelim = 0;\n          //console.log(node.id + \" is a leaf with no left sibling\");\n          //console.log(\"prelim  = \" + node.prelim);\n          //console.log(\"modifier= \" + node.modifier);\n        }\n      } else {\n        /* This Node is not a leaf, so call this procedure \n        /* recursively for each of its offspring.          */\n        var children_count = node.getChildrenCount();\n        for (let i = 0; i < children_count; i++) {\n          let child = node.getAdjacents()[i];\n          firstWalk(child, level + 1);\n        }\n        //console.log(node);\n\n        var midPoint = getMidPoint(node);\n        //console.log(\"midPoint of \" + node.id + \"= \" + midPoint);\n\n        //console.log(node.id + \" is the parent of nodes \" + leftMostChild.id + \" and \" + rightMostChild.id);\n\n        if (leftSibling) {\n          node.prelim += leftSibling.prelim + this.siblingSpacing;\n          let meanNodeSize = getMeanNodeSize(node, leftSibling);\n          node.prelim += meanNodeSize;\n          node.modifier = node.prelim - midPoint;\n          //console.log(\"prelim = \" + leftSibling.prelim + \" + \" + this.siblingSpacing + \" + \" + meanNodeSize + \" = \" + node.prelim);\n          //console.log(\"modifier= \" + node.prelim + \" - \" + node.modifier);\n          console.log(\"Calling Apportion for = \" + node.id + \" - level = \" + level);\n          apportion(node, level);\n        } else {\n          node.prelim = midPoint;\n          //console.log(\"prelim  = \" + node.prelim);\n        }\n      }\n    };\n\n    const getMidPoint = (node) => {\n      var leftMostChild = node.getLeftMostChild();\n      var rightMostChild = node.getRightMostChild();\n      var midPoint = (leftMostChild.prelim + rightMostChild.prelim) / 2;\n      return midPoint;\n    };\n\n    const setNodeNeighbor = (node) => {\n      let isLeftMost = node.isLeftMost();\n      let isRightMost = node.isRightMost();\n      console.log(\"setNodeNeighbor NODE= \" + node.id + \" , level= \" + node.level + \", isLeftMost(\" + isLeftMost + \")\" + \", isRightMost(\" + isRightMost + \")\");\n      if (isRightMost) {\n        //console.log(\"\\\\_setNodeNeighbor lastNodeAtLevel      = \" + node.id);\n        //console.log(\"\\\\_setNodeNeighbor this.lastNodeAtLevel[node.level]       = \" + node);\n        this.lastNodeAtLevel[node.level] = node;\n      } else if (isLeftMost) {\n        node.neighbor = this.lastNodeAtLevel[node.level];\n        if (node.neighbor) {\n          //console.log(\"\\\\_setNodeNeighbor of \" + node.id + \" to \" + node.neighbor.id);\n        }\n      } else {\n        // has no subtree to move\n        //console.log(\"\\\\_setNodeNeighbor      = \" + node + \"  DO nothing\");\n      }\n    };\n\n    const getMeanNodeSize = (leftNode, rightNode) => {\n      var meanNodeSize = 0.0;\n      switch (this.rootOrientation) {\n        case \"NORTH\":\n        case \"SOUTH\":\n          if (leftNode) {\n            meanNodeSize = leftNode.width; /// 2;\n          }\n          if (rightNode) {\n            meanNodeSize = rightNode.width; // / 2;\n          }\n          break;\n        case \"EAST\":\n        case \"WEST\":\n          if (leftNode) {\n            meanNodeSize = leftNode.height / 2;\n          }\n          if (rightNode) {\n            meanNodeSize = rightNode.height / 2;\n          }\n          break;\n      }\n      return meanNodeSize;\n    };\n\n    /**\n     * Determine the leftmost descendant of a node at a given depth.\n     * This is implemented using a post-order walk of the subtree\n     * under node, down to the level of searchDepth.\n     * If we've searched to the proper distance, return the currently leftmost node.\n     * Otherwise, recursively look at the progressively lower levels.\n     */\n    const getLeftmost = (node, currentLevel, searchDepth) => {\n      //console.log(\"START getLeftmost= \" + node.id + \"/\" + currentLevel + \"/\" + searchDepth);\n\n      /*  searched far enough.           */\n      if (currentLevel >= searchDepth) {\n        return node;\n      } else if (node.isLeaf()) {\n        return null; /* This node has no descendants    */\n      } else {\n        /* Do a post-order walk of the subtree.     */\n        var children_count = node.getChildrenCount();\n        //console.log(\"  \" + ThisNode.id + \"/  children_count=\" + children_count);\n        for (var i = 0; i < children_count; i++) {\n          let child = node.children[i];\n          let leftmost = getLeftmost(child, currentLevel + 1, searchDepth);\n          if (leftmost) {\n            return leftmost;\n          }\n        }\n      }\n    };\n\n    /*------------------------------------------------------\n     * Clean up the positioning of small sibling subtrees.\n     * Subtrees of a node are formed independently and placed as close together as possible.\n     * By requiring that the subtrees be rigid at the time they are put together, we avoid\n     * the undesirable effects that can accrue from positioning nodes rather than subtrees.\n     *\n     *  Called for non-leaf nodes\n     *----------------------------------------------------*/\n    const apportion = (node, level) => {\n      //console.log(\"_apportion \" + node.id);\n\n      var firstChild = node.children[0];\n      var firstChildLeftNeighbor = firstChild.neighbor;\n      var compareDepth = 1;\n      var depthToStop = this.maximumDepth - level;\n\n      if (firstChild && firstChildLeftNeighbor && compareDepth < depthToStop) {\n        var rightModSum, leftModSum, rightAncestor, leftAncestor;\n\n        leftModSum = 0;\n        rightModSum = 0;\n        rightAncestor = firstChild;\n        leftAncestor = firstChildLeftNeighbor;\n        for (var l = 0; l < compareDepth; l += 1) {\n          rightAncestor = rightAncestor.parent;\n          leftAncestor = leftAncestor.parent;\n          rightModSum += rightAncestor.modifier;\n          leftModSum += leftAncestor.modifier;\n        }\n        /**\n         * Find the moveDistance, and apply it to Node's subtree.\n         * Apply appropriate portions to smaller interior subtrees.\n         **/\n        var meanNodeSize = 10; //firstChildLeftNeighbor._getSize(this.orientation);\n\n        var totalGap = firstChildLeftNeighbor.prelim + leftModSum + this.subtreeSeparation + meanNodeSize - (firstChild.prelim + rightModSum);\n        //console.log(\"\\\\__apportion: totalGap of \" + node.id + \" = \" + totalGap);\n\n        if (totalGap > 0) {\n          /* Count interior sibling subtrees in LeftSiblings */\n\n          var subtree, subtreeMoveAux;\n\n          var numberOfLeftSiblings = 0;\n          for (subtree = node; subtree && subtree !== leftAncestor; subtree = subtree.getLeftSibling()) {\n            numberOfLeftSiblings += 1;\n            //console.log(\"\\\\__apportion: numberOfLeftSiblings: \" + numberOfLeftSiblings);\n            //console.log(\"\\\\__apportion: leftAncestor = \" + leftAncestor.id);\n          }\n\n          if (subtree) {\n            /* Apply portions to appropriate leftsibling subtrees. */\n            var portion = totalGap / numberOfLeftSiblings;\n            subtreeMoveAux = node;\n\n            while (subtreeMoveAux !== leftAncestor) {\n              //console.log(\"\\\\__apportion: subtree \" + subtree.id + \" & \" + \"subtreeMoveAux \" + subtreeMoveAux.id);\n\n              subtreeMoveAux.prelim += totalGap;\n              subtreeMoveAux.modifier += totalGap;\n              totalGap -= portion;\n              subtreeMoveAux = subtreeMoveAux.getLeftSibling();\n            }\n          } else {\n            /* Don't need to move anything--it needs to be done by an ancestor because      */\n            /* pAncestorNeighbor and pAncestorLeftmost are not siblings of each other.      */\n            return;\n          }\n        } /* end of the while  */\n\n        /* Determine the leftmost descendant of thisNode */\n        /* at the next lower level to compare its         */\n        /* positioning against that of its neighbor.     */\n        compareDepth++;\n\n        if (firstChild.getChildrenCount() === 0) {\n          firstChild = getLeftmost(node, 0, compareDepth);\n        } else {\n          firstChild = firstChild.getFirstChild();\n        }\n        if (firstChild) {\n          firstChildLeftNeighbor = firstChild.neighbor;\n        }\n      }\n\n\n    }; // apportion\n\n      /*------------------------------------------------------\n       * During a second pre-order walk, each node is given a final x-coordinate by summing its preliminary\n       * x-coordinate and the modifiers of all the node's ancestors.\n       * The y-coordinate depends on the height of the tree.\n       * (The roles of x and y are reversed for RootOrientations of EAST or WEST.)\n       * Returns: TRUE if no errors, otherwise returns FALSE.\n       *----------------------------------------- ----------*/\n      const secondWalk = (node, level, modSum) => {\n        //console.log(\"secondWalk    = \" + node);\n        if (level <= this.maximumDepth) {\n\n          node.x = this.marginLeft + node.prelim + modSum;\n          node.y = this.marginTop + level * this.levelSeparation;\n          //console.log(\"\\\\secondWalk: Node(\" + node.id + \" / \" + xTopAdjustment + \" / \" + node.prelim + \" / \" + modSum);\n          //console.log(\"\\\\secondWalk: \" + node.x + \",\" + node.y);\n\n          if (this.stackedLeaves) {\n            if (node.isLeaf()) {\n              let index = node.getIndex();\n              node.x = node.parent.x + this.stackedIndentation;\n              node.y += node.getIndex() * this.nodeHeight + node.getIndex() * this.siblingSpacing; //\tshift the node down\n              console.log(`secondWalk: ${node} #${index}  (${node.x}, ${node.y})`);\n            }\n          }\n\n          var children_count = node.getChildrenCount();\n          for (var i = 0; i < children_count; i++) {\n            var child = node.children[i];\n            secondWalk(child, level + 1, modSum + node.modifier);\n          }\n        }\n      };\n\n\n    // PUBLIC FUNCTIONS\n    this.calculate_Positions = (root, center) => {\n      console.log(\"calculate_Positions\", this, center);\n      //var root = this.graph.getRoot();\n      console.log(\"root\", root);\n      let starting_node = root;\n\n      // call the private function\n      firstWalk(starting_node, 0);\n      secondWalk(starting_node, 0, 0);\n    };\n\n    this.getTreeDimension = () => {\n        return { \"TO DO\" : \"\"};\n    }\n  }\n}\n","\n\nexport var NONE = \"none\";\nexport var pi = Math.PI;\n","import {NONE} from './Constants.js';\n\nexport default class Shape {\n    constructor(x, y, type) {\n        this.type = type;\n        this.x = x;\n        this.y = y;\n        this.isSelected = false;\n        this.strokeStyle = NONE;\n\n    }\n    getColor() {\n        return this.color;\n    }\n}","import Shape from './Shape.js';\nimport { NONE } from './Constants.js';\n\nexport default class Arc extends Shape {\n  constructor(x, y, radius, radians) {\n    super(x, y, \"Arc\");\n    this.radius = radius;\n    this.radians = radians;\n  }\n  isHit(x, y) {\n    var dx = this.x - x;\n    var dy = this.y - y;\n    if (dx * dx + dy * dy < this.radius * this.radius) {\n      return true;\n    }\n  }\n  render(ctx) {\n    ctx.save();\n\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, this.radians, false);\n\n    if (this.fillStyle) {\n      ctx.fillStyle = this.fillStyle;\n      ctx.fill();\n    }\n\n    if (this.strokeStyle != NONE) {\n      ctx.strokeStyle = this.strokeStyle;\n      ctx.lineWidth = this.lineWidth;\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n}","import Arc from './Arc.js';\n\n\nexport default class Circle extends Arc {\n    constructor(x, y, radius) {\n      super(x, y, radius, Math.PI *2);\n      this.type = \"Circle\";\n    }\n    isHit(x, y) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      if (dx * dx + dy * dy < this.radius * this.radius) {\n        return true;\n      }\n    }\n\n    getBBox() {\n      return {\n        x: this.x - this.radius,\n        y: this.y - this.radius,\n        width : this.radius * 2,\n        height : this.radius * 2\n      }\n    }\n  }","import Shape from './Shape.js';\nimport { NONE } from './Constants.js';\n\n\nexport default class Rectangle extends Shape {\n    constructor(x, y, width, height) {\n        super(x, y, \"Rectangle\");\n        this.width = width;\n        this.height = height;\n    }\n    getArea() {\n        return this.width * this.height;\n    }\n\n    isHit(x, y) {\n        if (\n            x > this.x &&\n            x < this.x + this.width &&\n            y > this.y &&\n            y < this.y + this.height\n        ) {\n            return true;\n        }\n    }\n    render(ctx) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(\n            this.x,\n            this.y,\n            this.width,\n            this.height\n        );\n\n        if (this.fillStyle) {\n            ctx.fillStyle = this.fillStyle;\n            ctx.fill();\n        }\n        if (this.strokeStyle != NONE) {\n            ctx.strokeStyle = this.strokeStyle;\n            ctx.lineWidth = this.lineWidth;\n            ctx.stroke();\n        }\n        ctx.restore();\n    }\n    toString() {\n        return `rectangle:  (${this.x},${this.y}) x (${this.width},${this.height})`;\n    }\n}","export default class InputDeviceTracker {\n\tconstructor(canvas, callback) {\n\t\tconsole.log(\"InputDeviceTracker ()\");\n\n\t\tthis.canvas = canvas;\n\t\tthis.callback = callback;\n\n\t\t/**\n\t\t *  Stores the panning offset between the initial location and the canvas location after is has been panned\n\t\t */\n\t\tthis.translatedPos = { x: 0, y: 0 };\n\n\t\t/**\n\t\t *  the accumulated horizontal(X) & vertical(Y) panning the user has done in total\n\t\t */\n\t\t(this.netPanningX = 0), (this.netPanningY = 0);\n\n\t\t/**\n\t\t *  coordinates of the last move\n\t\t */\n\t\t(this.lastMoveX = 0), (this.lastMoveY = 0);\n\n\t\tthis.startDragOffset = { x: 0, y: 0 };\n\n\t\tthis.canvas.addEventListener(\"mousedown\", this.onDown.bind(this));\n\t\tthis.canvas.addEventListener(\"mousemove\", this.onMove.bind(this));\n\t\tthis.canvas.addEventListener(\"mouseup\", this.onUp.bind(this));\n\n\t\tthis.canvas.addEventListener(\"touchstart\", this.onDown.bind(this));\n\t\tthis.canvas.addEventListener(\"touchmove\", this.onMove.bind(this));\n\t\tthis.canvas.addEventListener(\"touchend\", this.onUp.bind(this));\n\t}\n\n\tgetCoordinatesFromEvent(evt) {\n\t\tvar rect = self.canvas.getBoundingClientRect();\n\t\tvar offsetTop = rect.top;\n\t\tvar offsetLeft = rect.left;\n\n\t\tif (evt.touches) {\n\t\t\treturn {\n\t\t\t\tx: evt.touches[0].clientX - offsetLeft,\n\t\t\t\ty: evt.touches[0].clientY - offsetTop,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tx: evt.clientX - offsetLeft,\n\t\t\t\ty: evt.clientY - offsetTop,\n\t\t\t};\n\t\t}\n\t}\n\n\tonDown(event) {\n\t\t// tell the browser we're handling this event\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t\tvar mouseCoords = this.getCoordinatesFromEvent(event);\n\n\t\t// initial mouse click signaling the start of the dragging motion: we save the location of the user's mouse.\n\t\t// dragging offest = current mouse - panning\n\t\tthis.startDragOffset.x = mouseCoords.x - this.translatedPos.x;\n\t\tthis.startDragOffset.y = mouseCoords.y - this.translatedPos.y;\n\n\t\tthis.callback(\"down\", mouseCoords.x, mouseCoords.y);\n\t}\n\n\tonUp(event) {\n\t\tevent.preventDefault();\n\t\tthis.callback(\"up\");\n\t}\n\n\tonMove(event) {\n\t\t// tell the browser we're handling this event\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t\tvar mouseCoords = this.getCoordinatesFromEvent(event);\n\t\tthis.callback(\"move\", mouseCoords.x, mouseCoords.y);\n\t}\n}\n","import InputDeviceTracker from \"./InputDeviceTracker\";\nimport { Rectangle, Circle } from \"./shape\";\nimport { Renderer, setupHiDefCanvas } from \"./canvas\";\nimport { rectContainsShape } from \"./geometry\";\n\nexport class MChart {\n\tconstructor(container, options) {\n\t\tconsole.log(\"MChart container()\");\n\t\tconsole.log(container);\n\t\tthis.container = container;\n\t\t(this.startX = 0), (this.startY = 0);\n\t\t(this.lastMoveX = 0), (this.lastMoveY = 0);\n\n\t\tthis.canvas = document.getElementById(\"canvas\");\n\t\t//this.ctx = this.canvas.getContext(\"2d\");\n\t\tthis.ctx = setupHiDefCanvas(this.canvas);\n\n\t\tthis.cw = this.canvas.width;\n\t\tthis.ch = this.canvas.height;\n\n\t\tthis.renderer = new Renderer(this.ctx);\n\t\tthis.inputDeviceTracker = new InputDeviceTracker(\n\t\t\tthis.canvas,\n\t\t\tthis.manageInputEvents.bind(this)\n\t\t);\n\n\t\tconst DEFAULTS = {\n\t\t\tdisplay_grid: false,\n\t\t\tselection: {\n\t\t\t\tstrokeStyle: \"#CC0000\", //  'rgba(255,51,0,1)', //'rgba(0,128,255,1)';\n\t\t\t\tlineWidth: 1,\n\t\t\t\tfillStyle: \"rgba(255,51,0,0.05)\", //'rgba(0,128,255, 0.2)';\n\t\t\t},\n\t\t};\n\t\tthis.options = Object.assign({}, DEFAULTS, options);\n\n\t\t/* The selection rectangle */\n\t\tthis.selection = new Rectangle(100, 100, 100, 100);\n\t\tthis.selection.strokeStyle = this.options.selection.strokeStyle;\n\t\tthis.selection.fillStyle = this.options.selection.fillStyle;\n\t\tthis.selection.lineWidth = this.options.selection.lineWidth;\n\n\t\t/* The list of ojbects to draw */\n\t\tthis.objects = [];\n\n\t\t/**\n\t\t *  Stores the panning offset between the initial location and the canvas location after is has been panned\n\t\t */\n\t\tthis.translatePos = { x: 0, y: 0 };\n\n\t\t/**\n\t\t *  the accumulated horizontal(X) & vertical(Y) panning the user has done in total\n\t\t */\n\t\tthis.netPanningX = 0;\n\t\tthis.netPanningY = 0;\n\n\t\t/**\n\t\t *  coordinates of the last move\n\t\t */\n\t\tthis.lastMoveX = 0; this.lastMoveY = 0;\n\n\t\tthis.isSelecting = false;\n\t\tthis.isDragging = false;\n\t\tthis.clicked_on_the_canvas = false;\n\t}\n\n\tdump() {\n\t\tconsole.log(\"MChart container= \");\n\t\tconsole.log(\"- objects= \");\n\t\tconsole.log(this.objects);\n\t}\n\n\taddObject(object) {\n\t\tthis.objects.push(object);\n\t\t//this.draw();\n\t}\n\n\t/**\n\t *  Private function to render one frame. It is being called by render()\n\t */\n\trenderFrame = () => {\n\t\t// console.log(\"renderFrame\")\n\t\tthis.ctx.clearRect(0, 0, this.cw, this.ch);\n\n\t\tif (this.options.display_grid) {\n\t\t\tthis.renderer.drawGrid(this.cw, this.ch);\n\t\t}\n\n\t\tthis.objects.forEach((object) => {\n\t\t\tobject.render(this.ctx);\n\t\t\tif (object.isSelected) {\n\t\t\t\tvar selection;\n\t\t\t\tif (object instanceof Circle) {\n\t\t\t\t\tvar bbox = object.getBBox();\n\t\t\t\t\tselection = new Rectangle(\n\t\t\t\t\t\tbbox.x,\n\t\t\t\t\t\tbbox.y,\n\t\t\t\t\t\tbbox.width,\n\t\t\t\t\t\tbbox.height\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tselection = new Rectangle(\n\t\t\t\t\t\tobject.x,\n\t\t\t\t\t\tobject.y,\n\t\t\t\t\t\tobject.width,\n\t\t\t\t\t\tobject.height\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tselection.strokeStyle = this.options.selection.strokeStyle;\n\t\t\t\tselection.lineWidth = this.options.selection.lineWidth;\n\t\t\t\tselection.render(this.ctx);\n\n\t\t\t}\n\n\t\t\tif (this.isSelecting == true) {\n\t\t\t\tthis.selection.render(this.ctx);\n\t\t\t}\n\t\t});\n\t};\n\n\trender() {\n\t\tthis.renderFrame();\n\t\twindow.requestAnimationFrame(this.render.bind(this, this.canvas));\n\t}\n\n\tmanageInputEvents(evtType, x, y) {\n\t\tswitch (evtType) {\n\t\t\tcase \"down\":\n\t\t\t\tthis.mouseIsDown = true;\n\n\t\t\t\tthis.startX = x;\n\t\t\t\tthis.startY = y;\n\t\t\t\tthis.lastMoveX = x;\n\t\t\t\tthis.lastMoveY = y;\n\n\t\t\t\t/* we assume the user clicked on the canvas unless we find an object was hit */\n\t\t\t\tthis.clicked_on_the_canvas = true;\n\n\t\t\t\t// we start from last to check the shape that is on top first\n\t\t\t\tfor (var i = this.objects.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar object = this.objects[i];\n\t\t\t\t\t//    console.log (\"checking for hit object = \" + object.color);\n\t\t\t\t\tif (object.isHit(x, y)) {\n\t\t\t\t\t\tobject.isSelected = true;\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\"Clicked on : \" +\n\t\t\t\t\t\t\t\tobject.constructor.name +\n\t\t\t\t\t\t\t\t\"/\" +\n\t\t\t\t\t\t\t\tobject.fillStyle\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmoveObjectToLastPosition(this.objects, object);\n\t\t\t\t\t\tthis.clicked_on_the_canvas = false;\n\t\t\t\t\t\tthis.isSelecting = false;\n\t\t\t\t\t\tthis.isDragging = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"clicked on the canvas = \" + this.clicked_on_the_canvas\n\t\t\t\t);\n\n\t\t\t\tif (this.clicked_on_the_canvas) {\n\t\t\t\t\tconsole.log(\"clicked on the canvas\");\n\t\t\t\t\tthis.selection_startX = x;\n\t\t\t\t\tthis.selection_startY = y;\n\n\t\t\t\t\t/* reset selection if user clicked on the canvas */\n\t\t\t\t\tthis.objects.forEach((object) => {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\"RESET object \" +\n\t\t\t\t\t\t\t\tobject.fillStyle +\n\t\t\t\t\t\t\t\t\" is Circle ? \" +\n\t\t\t\t\t\t\t\t(object instanceof Circle)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tobject.isSelected = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"up\":\n\t\t\t\tthis.mouseIsDown = false;\n\t\t\t\tconsole.log(\"MOUSE UP\");\n\t\t\t\tconsole.log(\" isDragging : \" + this.isDragging);\n\t\t\t\tconsole.log(\" isSelecting : \" + this.isSelecting);\n\n\t\t\t\tif (this.isSelecting) {\n\t\t\t\t\tconsole.log(\" selection : \" + this.selection);\n\t\t\t\t\t/* check if selection includes any object */\n\t\t\t\t\tthis.objects.forEach((object) => {\n\t\t\t\t\t\tif (rectContainsShape(this.selection, object)) {\n\t\t\t\t\t\t\tobject.isSelected = true;\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"object is selected: \" +\n\t\t\t\t\t\t\t\t\tobject.constructor.name +\n\t\t\t\t\t\t\t\t\t\"/\" +\n\t\t\t\t\t\t\t\t\tobject.fillStyle\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.isSelecting = false;\n\t\t\t\tthis.isDragging = false;\n\t\t\t\tbreak;\n\n\t\t\tcase \"move\":\n\t\t\t\tif (this.clicked_on_the_canvas && this.mouseIsDown) {\n\t\t\t\t\tthis.isSelecting = true;\n\t\t\t\t\t// getting the min & max to handle when the user selects from bottom right to top left\n\t\t\t\t\tconst x1 = Math.min(this.selection_startX, this.lastMoveX);\n\t\t\t\t\tconst y1 = Math.min(this.selection_startY, this.lastMoveY);\n\t\t\t\t\tconst x2 = Math.max(this.selection_startX, this.lastMoveX);\n\t\t\t\t\tconst y2 = Math.max(this.selection_startY, this.lastMoveY);\n\n\t\t\t\t\tthis.selection.x = Math.floor(x1);\n\t\t\t\t\tthis.selection.y = Math.floor(y1);\n\t\t\t\t\tthis.selection.width = Math.floor(x2 - x1);\n\t\t\t\t\tthis.selection.height = Math.floor(y2 - y1);\n\t\t\t\t}\n\t\t\t\tthis.lastMoveX = x;\n\t\t\t\tthis.lastMoveY = y;\n\n\t\t\t\tvar dx = x - this.startX;\n\t\t\t\tvar dy = y - this.startY;\n\n\t\t\t\tthis.startX = x;\n\t\t\t\tthis.startY = y;\n\n\t\t\t\tif (this.isDragging) {\n\t\t\t\t\tthis.objects.forEach((object) => {\n\t\t\t\t\t\tif (object.isSelected) {\n\t\t\t\t\t\t\tobject.x += dx;\n\t\t\t\t\t\t\tobject.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tinit() {\n\t\tthis.inputDeviceTracker = new InputDeviceTracker(\n\t\t\tthis.canvas,\n\t\t\tthis.manageInputEvents.bind(this)\n\t\t);\n\t}\n}\n\n/**\n *  We move the node selection to the last position so that it is drawn above the other shapes on the canvas\n */\nfunction moveObjectToLastPosition(object_list, object_to_move) {\n\tobject_list.forEach(function (object, index) {\n\t\tif (object === object_to_move) {\n\t\t\tobject_list.splice(index, 1);\n\t\t\tobject_list.push(object_to_move);\n\t\t\treturn;\n\t\t}\n\t});\n}","export class SVGUtil {\n // static createSVGelement(width, height) {\n  static createSVGelement() {\n    let svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    //svgElement.setAttribute(\"width\", width);\n    //svgElement.setAttribute(\"height\", height);\n\n    svgElement.setAttribute(\"width\", \"100%\");\n    svgElement.setAttribute(\"height\", \"100%\");\n    return svgElement;\n  }\n  static createLine(svg, x1, y1, x2, y2) {\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    line.setAttribute(\"x1\", x1);\n    line.setAttribute(\"y1\", y1);\n    line.setAttribute(\"x2\", x2);\n    line.setAttribute(\"y2\", y2);\n    line.setAttribute(\"stroke\", \"#022D42\");\n    line.setAttribute(\"stroke-width\", 0.6);\n    svg.appendChild(line);\n  }\n\n  static deleteLines(svg) {\n    const lines = svg.querySelectorAll(\"line\");\n    lines.forEach((line) => line.remove());\n  }\n}\n","import { TreeLayout } from \"./layout\";\nimport { Tree } from \"./graph/Tree\";\nimport { SVGUtil } from \"./SVGUtil.js\";\n\nexport class OrgChart {\n  constructor(container) {\n    this.container = container;\n\n    this.linksContainer = document.createElement(\"div\");\n    this.linksContainer.className = \"links\";\n    this.container.appendChild(this.linksContainer);\n    this.svg = SVGUtil.createSVGelement(1000, 1000);\n    this.linksContainer.appendChild(this.svg);\n\n    this.nodesContainer = document.createElement(\"div\");\n    this.nodesContainer.id = \"nodes\";\n    this.container.appendChild(this.nodesContainer);\n\n\n    this.tree = new Tree();\n  }\n\n  setData(data) {\n    console.log(\"HERE in setData\", data);\n    this.tree.loadFromJSON(JSON.stringify(data));\n    console.log(\"tree\", this.tree);\n\n    this.treeLayout = new TreeLayout(this.tree, {\n      nodeHeight: 50,\n      nodeWidth: 200,\n    });\n    var root = this.tree.getRoot();\n    this.treeLayout.calculate_Positions(root, { x: 100, y: 100 });\n    console.log(\"treeLayout\", this.treeLayout);\n\n    var treeDimension = this.treeLayout.getTreeDimension();\n    console.log(\" -  treeDimension : \", treeDimension);\n\n    const cssString = `\n    .position-card {\n      align-items: flex-start;\n      background: #ffffff;\n      border-top: 10px solid #01778e;\n      box-shadow: 0 1px 4px 2px hsla(0, 0%, 80%, 0.3);\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.6);\n      display: flex;\n      flex-direction: column;\n      font-family: sans-serif;\n      position: absolute;\n      padding: 4px 8px;\n\n    }\n\n.position-card .name {\n  font-size: 12px;\n  font-weight: 300;\n}\n.position-card .job-title {\n  font-size: 14px;\n  font-weight: 500;\n}\n.links {\n  position: relative;\n  z-index: -2;\n}\n.position-info {\n  align-items: flex-start;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.position-data {\n  background-color: white;\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n}\n.child-count {\n  background-color: white;\n  z-index: -1;\n  cursor: pointer;\n  font-size: 0.6em;\n  position: absolute;\n  right: 50%;\n  bottom: 0;\n  padding: 4px;\n  vertical-align: middle;\n  text-align: center;\n  transform: translate(50%, 100%);\n  box-shadow: 0 1px 4px 2px hsla(0, 0%, 80%, 0.3);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.6);\n}\n   `;\n\n    const styleElement = document.createElement(\"style\");\n    styleElement.textContent = cssString;\n    document.head.appendChild(styleElement);\n\n    this.#drawNode(root);\n  }\n  #drawNode = function (node) {\n    console.log(`drawNode node id: \"${node.id}\", level: ${node.level}, path: ${node.path}`);\n    console.log(node);\n    //console.log(this.#nodeTemplateHtml(node));\n\n    const existingChild = this.nodesContainer.querySelector(`[data-node-id='${node.id}']`);\n    console.log(\"existingChild: \", existingChild);\n\n    this.#createLine(node);\n\n    if (!existingChild) {\n      const nodeElement = this.#buildNode(node);\n      this.nodesContainer.appendChild(nodeElement);\n    }\n\n    // Draw this node's children.\n    if (!node.isCollapsed) {\n      node.children.forEach((child) => {\n        this.#drawNode(child);\n      });\n    }\n  }.bind(this);\n\n  #nodeTemplateHtml = function (node) {\n    return `\n      <div class=\"position-card\" style=\"left: ${node.x}px; top: ${node.y}px\">\n        <div class=\"position-info\">\n          <div class=\"job-title\">${node.data.job_title}</div>\n          <div class=\"name\">${node.data.name}</div>\n        </div>\n      <!-- position data -->\n      </div>\n    `;\n  };\n\n  //         <div style=\"margin-top:-0px;background-color:#01778e;height:10px;width:100%;border-radius:1px\"></div>\n\n  //  <div class=\"position-data\">\n  //    <div>A</div><div>B</div>\n  //  </div>\n\n  #buildNode = function (node, templateHtml) {\n    console.log(\"BuildNode templateHtml\", templateHtml);\n\n    const templateFilled = this.#nodeTemplateHtml(node);\n    const parser = new DOMParser();\n    const templateElement = parser.parseFromString(templateFilled, \"text/html\").querySelector(\".position-card\");\n    const nodeElement = templateElement.cloneNode(true);\n\n    nodeElement.dataset.nodeId = node.id.toString();\n\n    nodeElement.style.left = `${node.x}px`;\n    nodeElement.style.top = `${node.y}px`;\n    nodeElement.style.width = `${node.width}px`;\n\n    const childCount = node.children.length;\n    if (childCount > 0) {\n      var childCountElement = document.createElement(\"span\");\n      childCountElement.classList.add(\"child-count\");\n      childCountElement.innerHTML = \"\" + childCount;\n      nodeElement.appendChild(childCountElement);\n\n      childCountElement.addEventListener(\"click\", (e) => {\n        var nodeElement = e.target.parentElement;\n        let nodeId = nodeElement.dataset.nodeId;\n        console.log(\"nodeId=\" + nodeId);\n        let clickedNode = this.tree.getNode(nodeId);\n        console.log(\"clickedNode=\", clickedNode);\n        clickedNode.isCollapsed = !clickedNode.isCollapsed;\n\n        // get all the nodes currently displayed\n        const nodeElementList = this.nodesContainer.querySelectorAll(\"[data-node-id]\");\n        const nodesList = Array.from(nodeElementList).map((node) => node.getAttribute(\"data-node-id\"));\n        console.log(\"nodes currently displayed=\", nodesList);\n\n        if (clickedNode.isCollapsed) {\n          //nodeElement.innerHTML = '';  // remove all children\n          const rootElement = this.nodesContainer;\n          while (rootElement.firstChild) {\n            rootElement.removeChild(rootElement.firstChild);\n          }\n\n          SVGUtil.deleteLines(this.svg);\n        }\n\n        //console.log(this.tree);\n\n        //context.clearRect(0, 0, canvas.width, canvas.height);\n        // redraw the tree\n        this.#drawNode(this.tree.getRoot());\n      });\n    }\n    return nodeElement;\n  };\n\n  #createLine = function (node) {\n    console.log(\"createLine TODO check if stackedLeaves: \", node);\n\n    if (node.parent && node.parent.isCollapsed) {\n      return;\n    }\n    if (node.isLeaf()) {\n      const leftMiddlePoint = { x: node.x, y: node.y + node.height / 2 };\n      const indentationPoint = { x: leftMiddlePoint.x - this.treeLayout.stackedIndentation / 2, y: leftMiddlePoint.y };\n\n      // horizontal line from node to vertical line\n      //           |\n      //      ────────────\n      // =>   --   --   --\n      SVGUtil.createLine(this.svg, leftMiddlePoint.x, leftMiddlePoint.y, indentationPoint.x, indentationPoint.y);\n      // vertical line from indentation to parent\n      //           |\n      //      ────────────\n      // =>   |--  |--  |--\n      SVGUtil.createLine(this.svg, indentationPoint.x, indentationPoint.y, indentationPoint.x, indentationPoint.y - this.treeLayout.levelSeparation);\n    } else {\n      // draw a horizontal line connecting the first or left most child and the last or right most child\n      //           |\n      // =>   ────────────\n      //     |     |      |\n      if (node.level == 1) {\n        if (!node.isCollapsed && node.children.length >= 1) {\n          // horizontal line from leftMostChild to the rightMostChild\n          let leftMostChild = node.getLeftMostChild();\n          let rightMostChild = node.getRightMostChild();\n          console.log(\"=> left Child : \" + leftMostChild);\n          console.log(\"=> right Child : \" + rightMostChild);\n          SVGUtil.createLine(this.svg, leftMostChild.x + node.width / 2, leftMostChild.y - node.height / 2, rightMostChild.x + node.width / 2, rightMostChild.y - node.height / 2);\n\n          // Find the bottom middle point of the current node\n          //   =>       |\n          //      ────────────\n          //      |     |      |\n        const nodeBottomMiddlePoint = {\n          x: node.x + node.width / 2,\n          y: node.y + (node.height / 2)\n        };\n        // Straight line from parent to child just below it\n        const intersectionPoint = {\n          x: nodeBottomMiddlePoint.x,\n          y: nodeBottomMiddlePoint.y  + this.treeLayout.levelSeparation - node.height\n        };\n         SVGUtil.createLine(this.svg,\n           nodeBottomMiddlePoint.x, nodeBottomMiddlePoint.y,\n           intersectionPoint.x, intersectionPoint.y);\n        }\n      }\n      // draw vertical line connecting the child to the line across top of children\n      //           |\n      //      ────────────\n      // =>  |     |      |\n      if (node.parent !== undefined) {\n        // Find the top middle point of the current node\n        const nodeTopMiddlePoint = {\n          x: node.x + node.width / 2,\n          y: node.y,\n        };\n        // Calculate the point where the vertical line intersects with the horizontal line\n        const intersectionPoint = {\n          x: nodeTopMiddlePoint.x,\n          y: nodeTopMiddlePoint.y - node.height / 2,\n        };\n        SVGUtil.createLine(this.svg,\n           nodeTopMiddlePoint.x, nodeTopMiddlePoint.y,\n           intersectionPoint.x, intersectionPoint.y);\n      }\n\n\n    }\n  };\n}\n","// =============================================================\n//                          TRIGO FUNCTIONS\n// =============================================================\nexport const TWO_PI = Math.PI * 2;\n\n/**\n * Concernt mouse (x, y) relative to the center of the circle\n */\nexport function ConvertMousePositionToCoordinateGraph(mousePos, center) {\n  return {\n    x: mousePos.x - center.x,\n    y: -1 * (mousePos.y - center.y)\n  }\n}\n\nexport function to_radians(degrees) {\n  return degrees * (Math.PI / 180);\n}\n\nexport function to_degrees(radians) {\n  return radians * (180 / Math.PI);\n}\n\nexport function distanceXY(x0, y0, x1, y1) {\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport function pointInCircle(point, circle) {\n  return distanceXY(point.x, point.y, circle.x, circle.y) < circle.radius;\n}\n\n/**\n * Convert from cartesian coordinates (x, y) to polar coordinates (r, θ).\n * @param {*} cx \n * @param {*} cy \n * @param {*} r \n * @param {*} angle \n * @returns \n */\nexport function getPointOnArc(cx, cy, r, angle) {\n  return {\n    x: cx + r * Math.cos(angle),\n    y: cy + r * Math.sin(angle)\n  };\n}\nexport function __getPointOnArc(point, r, angle) {\n  return {\n    x: point.x + r * Math.cos(angle),\n    y: point.y + r * Math.sin(angle)\n  };\n\n}\nexport function rotate(x, y, angle) {\n  return {\n    x: x * Math.cos(angle) - y * Math.sin(angle),\n    y: x * Math.sin(angle) + y * Math.cos(angle)\n  };\n}\n\n/*\n * Returns the angle θ between 2 points\n */\nfunction findAngle(p1, p2) {\n  var angleRAD = Math.atan2(p2.y - p1.y, p2.x - p1.x);\n  return angleRAD;\n}\n\n/**\n * Calculates the midpoint between two points [x1,y1] &  [x2,y2]\n */\nexport function midpoint(x1, y1, x2, y2) {\n  return {\n    x: (x1 + x2) / 2,\n    y: (y1 + y2) / 2\n  };\n}\n\n\n//bearing between the compass'center point and the specified point\nexport function __getBearing(point) {\n  var compass_points = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\", \"N\"];\n  var bearing = findAngle(\n    { x: this.cx, y: -this.cy },\n    { x: point.x, y: -point.y });\n\n    var bearingTT;\n  if (bearing < 0) {\n     bearingTT = 360 + bearing;\n   } \n   else {\n     bearingTT = bearing;\n   }\n  var compass_lookup = Math.round(bearingTT / 45);\n//  log(bearingTT + \" \" + compass_lookup + \" - \" + bearing);\n  return compass_points[compass_lookup];\n}","\nexport * from \"./canvas\";\nexport * from \"./geometry\";\nexport * from \"./graph\";\nexport * from \"./layout\";\nexport * from \"./shape\";\n\nexport {MChart} from \"./MChart\";\nexport {OrgChart} from \"./OrgChart\";\n\nexport var version = \"0.1\"\n\n\n"],"names":["setupHiDefCanvas","canvas","devicePixelRatio","window","ctx","getContext","console","log","width","height","rect","getBoundingClientRect","initialWidth","initialHeight","scale","style","Renderer","w","h","save","fillStyle","fillRect","lineWidth","strokeStyle","i","beginPath","moveTo","lineTo","closePath","stroke","fillText","restore","Vector","x","y","isNaN","warn","n","this","error","v1","amount","Math","atan2","sqrt","magSq","div","mag","normalize","mult","v2","v","copy","lerp","min","max","randomIntBounds","floor","random","rectContainsShape","rectangle","shape","type","circle","radius","rectContainsCircle","rect2","result_X","rect1","result_Y","Link","source","target","id","Node","data","children","isCollapsed","size","mass","pos","velocity","acceleration","node","push","indexOf","Graph","graph","nodeList","Map","linkList","adjacency","changed","root","set","nodeId","get","object","parentId","parent","getNode","level","addNode","length","sourceNode_id","targetNode_id","sourceNode","undefined","TypeError","targetNode","link","exists","forEach","item","addChild","json_input","json_object","JSON","parse","_typeof","nodes","index","addObject","links","addLink","Array","from","values","map","printNode","adjacentsRepresentation","getAdjacents","join","TreeNode","nodeID","nodeData","path","getChildAt","getFirstChild","getLastChild","getChildrenCount","isLeftMost","isAncestorCollapsed","isRightMost","Tree","nodeMap","callback","traverse","queue","shift","child","json","_this2","status","message","nodeIndex","parentPath","AbstractGraphLayout","options","starting_vertex","center","ForceDirected","initNodes","Object","assign","GRAVITY","REPULSION","force","forceOverMass","add","gravity","nodeValues","j","node1","node2","dir","sub","distance","force1","inverseForce","neg_force","pos_force","applyForcesTowardsCenter","applyRepulsiveForces","applyForcesExertedByConnections","updateNodesVelocity","DEFAULTS","rootOrientation","maximumDepth","levelSeparation","marginTop","marginLeft","siblingSpacing","subtreeSeparation","stackedLeaves","stackedIndentation","nodeWidth","nodeHeight","TreeLayout","tree","lastNodeAtLevel","_this","firstWalk","prelim","modifier","setNodeNeighbor","leftSibling","getLeftSibling","isLeaf","meanNodeSize","getMeanNodeSize","children_count","midPoint","getMidPoint","apportion","leftMostChild","getLeftMostChild","rightMostChild","getRightMostChild","neighbor","leftNode","rightNode","getLeftmost","currentLevel","searchDepth","leftmost","firstChild","firstChildLeftNeighbor","compareDepth","depthToStop","rightModSum","leftModSum","rightAncestor","leftAncestor","l","totalGap","subtree","subtreeMoveAux","numberOfLeftSiblings","portion","secondWalk","modSum","getIndex","calculate_Positions","starting_node","getTreeDimension","NONE","Shape","isSelected","color","Arc","radians","dx","dy","arc","fill","Circle","PI","Rectangle","InputDeviceTracker","translatedPos","netPanningX","netPanningY","lastMoveX","lastMoveY","startDragOffset","addEventListener","onDown","bind","onMove","onUp","evt","self","offsetTop","top","offsetLeft","left","touches","clientX","clientY","event","preventDefault","stopPropagation","mouseCoords","getCoordinatesFromEvent","MChart","container","clearRect","cw","ch","display_grid","renderer","drawGrid","objects","render","selection","bbox","getBBox","isSelecting","startX","startY","document","getElementById","inputDeviceTracker","manageInputEvents","translatePos","isDragging","clicked_on_the_canvas","renderFrame","requestAnimationFrame","evtType","mouseIsDown","isHit","constructor","name","moveObjectToLastPosition","selection_startX","selection_startY","x1","y1","x2","y2","object_list","object_to_move","splice","SVGUtil","svgElement","createElementNS","setAttribute","svg","line","appendChild","querySelectorAll","remove","OrgChart","existingChild","nodesContainer","querySelector","nodeElement","job_title","templateHtml","templateFilled","DOMParser","parseFromString","cloneNode","dataset","toString","childCount","childCountElement","createElement","classList","innerHTML","e","parentElement","clickedNode","nodeElementList","nodesList","getAttribute","rootElement","removeChild","deleteLines","getRoot","leftMiddlePoint","indentationPoint","treeLayout","createLine","nodeBottomMiddlePoint","intersectionPoint","nodeTopMiddlePoint","linksContainer","className","createSVGelement","loadFromJSON","stringify","treeDimension","styleElement","textContent","head","degrees"],"mappings":"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"}